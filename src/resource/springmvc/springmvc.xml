<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/mvc
                http://www.springframework.org/schema/mvc/spring-mvc.xsd
                http://www.springframework.org/schema/tx
                http://www.springframework.org/schema/tx/spring-tx.xsd
                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop.xsd ">


    <description>Spring MVC Configuration</description>
    <!--1. 开启spring mvc注解模式 -->
    <!--简化配置：添加注解驱动；扩充了注解驱动，可以将请求参数绑定到控制器参数
        （1） 自动注册DefaulAnnotationHandlerMappering，AnntationMehodHandlerAdapter
        （2） 提供一系列：数据绑定、数字、日期的format @NumberFormat，@DataTimeFormat 、xml、json默认读写支持
    -->
    <!--启动SpringMVC的注解功能，完成请求和注解POJO的映射-->

    <mvc:annotation-driven>
        <mvc:message-converters>
            <ref bean="jacksonHttpMessageConverter "></ref>
            <ref bean="stringHttpMessageConverter"></ref>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="jacksonHttpMessageConverter " class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">

            <list>
                <value>application/json</value>
            </list>
        </property>

    </bean>

    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <value>text/html;charset=UTF-8</value>
        </property>
    </bean>

    <!-- FastJson注入 -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
            <!-- FastJson -->
            <bean id="fastJsonHttpMessageConverter"
                  class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="features">
                    <array value-type="com.alibaba.fastjson.serializer.SerializerFeature">
                        <!-- 避免循环引用 -->
                        <value>DisableCircularReferenceDetect</value>
                        <!-- 是否输出值为null的字段 -->
                        <value>WriteMapNullValue</value>
                        <!-- 数值字段如果为null,输出为0,而非null -->
                        <value>WriteNullNumberAsZero</value>
                        <!-- 字符类型字段如果为null,输出为"",而非null  -->
                        <value>WriteNullStringAsEmpty</value>
                        <!-- List字段如果为null,输出为[],而非null -->
                        <value>WriteNullListAsEmpty</value>
                        <!-- Boolean字段如果为null,输出为false,而非null -->
                        <value>WriteNullBooleanAsFalse</value>
                    </array>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 2.配置静态资源
         （1） 加入对静态资源的处理 js，jpg
         （2） 允许使用“/” 做整体映射
    -->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>
    <!--3.配置视图解析器：配置ViewResolver，定义跳转文件的后缀。可以定义多个ViewResolve，shiyongorder属性排序,InternalResourceViewResolver 放在最后

    -->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        &lt;!&ndash;这里配置的是自动给action的方法return的字符串加上前缀和后缀，变成一个可用的url地址&ndash;&gt;
        <property name="prefix" value="/WEB-INF/view/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>-->

    <!-- 定义视图文件解析 html专用-->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath">
            <value>/WEB-INF/view</value>
        </property>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">1</prop>
                <prop key="default_encoding">UTF-8</prop>   <!--//关键解决点-->
                <prop key="number_format">0.##</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
            </props>
        </property>
    </bean>
    <bean id="viewResolverTtl" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="com.springmvc.common.util.MyFreeMarkerView"/>
       <!-- <property name="suffix" value=".html" />-->
        <!--<property name="order" value="0"></property>
        <property name="contentType" value="text/html;charset=UTF-8"></property>-->
        <property name="suffix" value=".html" />
        <property name="contentType" value="text/html;charset=UTF-8" />
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="exposeSpringMacroHelpers" value="true" />
        <property name="requestContextAttribute" value="request" />
        <property name="cache" value="true" />
        <property name="order" value="0" />


    </bean>
    <!-- DispatcherServlet上下文，只管理@Controller类型的bean，忽略其他类型的bean 如@Service（通过Spring来处理）
    -->
    <!--检测这些类并注册相应的bean：让bean定义注解工作起来，也就是上述传统的声明方式。它的base-package属性指定了需要扫描的包
     ，类包及其递归子包中所有的类都会被处理。
     该配置项其实也包含了自动注入上述processor的功能，因此当使用<context:component-scan/>后，即可以将<context:annotation-config/>省去
    -->
    <!--4. 扫描web相关的Bean ，使用Annotation自动注册Bean，只扫描@Controller-->
    <context:component-scan base-package="com.springmvc.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>
    </context:component-scan>
    <!--@ResponseBody的json-->
    <!--<bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">-->
    <!--<property name="supportedMediaTypes">-->
    <!--<list>-->
    <!--<value>application/json;charset=UTF-8</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--&lt;!&ndash;<property name="objectMapper">&ndash;&gt;-->
    <!--&lt;!&ndash;<bean class="com.fasterxml.jackson.databind.ObjectMapper">&ndash;&gt;-->
    <!--&lt;!&ndash;<property name="dateFormat">&ndash;&gt;-->
    <!--&lt;!&ndash;<bean class="java.text.SimpleDateFormat">&ndash;&gt;-->
    <!--&lt;!&ndash;<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"></constructor-arg>&ndash;&gt;-->
    <!--&lt;!&ndash;</bean>&ndash;&gt;-->
    <!--&lt;!&ndash;</property>&ndash;&gt;-->
    <!--&lt;!&ndash;</bean>&ndash;&gt;-->
    <!--&lt;!&ndash;</property>&ndash;&gt;-->
    <!--</bean>-->
    <!--&lt;!&ndash;&ndash;&gt;-->
    <!--<bean id="stringConverter"  class="org.springframework.http.converter.StringHttpMessageConverter">-->
    <!--<property name="supportedMediaTypes">-->
    <!--<list>-->
    <!--<value>text/plain;charset=UTF-8</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--配置上传文件，如果没有使用上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包-->

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--默认编码-->
        <property name="defaultEncoding" value="utf-8"></property>
        <!--文件大小最大值-->
        <property name="maxUploadSize" value="10485760000"/>
        <!--内存中的最大值-->
        <property name="maxInMemorySize" value="4096"></property>
    </bean>

    <!--配置默认从定向-->
   <!-- <mvc:view-controller path="/" view-name=""></mvc:view-controller>-->
   <!-- <mvc:view-controller path="/" view-name="redirect:/"/>-->

</beans>